(start-repl)
(js/alert "o đes")
:cljs/quit
(:cljs/quit)
:cljs/quit
(start-repl)
(js/alert "HEllo")
:cljs/quit
(start-repl)
(js/alert "aj još jednom")
:cljs/quit
(start-repl)
js/window
js/document
js/console
(js/console.log "one more hello")
(.getElementById js/document "loginForm")
(.log console "bla")
(.log js/console "bla")
(.-value (.getElementById js/document "email"))
(set! (.-value(.getElementById js/document "email")) "custom@set")
(.-value (.getElementById js/document "email"))
(count (.-value(.getElementById js/document "email")))
(count (.-value(.getElementById js/document "password")))
(doc defn)
(doc >)
(doc if)
(doc let)
(source let)
(require '[modern-cljs.login :as 1] :reload)
(require '[modern-cljs.login :as l] :reload)
l/validate-form
(require '[modern-cljs.login :as l] :reload)
l/validate-form
(require '[modern-cljs.login :as l] :reload)
l/validate-form
:cljs/quit
(require '[modern-cljs.login :as l] :reload)
(start-repl
)
(require '[modern-cljs.login :as l] :reload)
l/validate-form
:cljs/quit
js/window
(js/console.log "Hello from ClojureScript!")
(start-repl)
(js/console.log "Hello from ClojureScript!")
(js/document.getElementById "loginForm")
 (.-value (.getElementById js/document "email"))
(require '[modern-cljs.login :as l] :reload)
l/validate-form
(source l/validate-form)
 (set! (.-value (.getElementById js/document "email")) "")
(set! (.-value (.getElementById js/document "password")) "")
(l/validate-form)
(start-repl)
(require '[domina.core :refer [by-id value set-value!]])
(doc by-id)
(doc set-value!)
(set-value! (by-id "email") "my@emajl")
(require '[modern-cljs.login :as l] :reload)
l/validate-form
(l/validate-form)
(value (by-id "quantity"))
(value (by-id "price"))
(let [quantity (value (by-id "quantity"))
price (value (by-id "price))
tax (value (by-id "tax"))
discount (value (by-id "discount"))]
(-> (* quantity price)
(* ( + 1 (/ tax 100)))
(- discount)
(.toFixed 2)
(let [quantity (value (by-id "quantity"))
                 price (value (by-id "price"))
                 tax (value (by-id "tax"))
                 discount (value (by-id "discount"))]
             (-> (* quantity price)
                             (* (+ 1 (/ tax 100)))
                             (- discount)
                             (.toFixed 2)))
(require '[modern-cljs.shopping :as s] :reload)
s/recalculate
s/calculate
(s/calculate)
(require '[modern-cljs.login :as l] :reload)
(l/validate-form)
(.-onsubmit (by-id "loginForm"))
(.-onload js/window)
(l/init)
(.-onsubmit (by-id "loginForm"))
:cljs/quit
(start-repl)
(require '[modern-cljs.shopping :as shop] :reload
'[domnina.core :as dom] :reload
'[domina.events :as evt] :reload)
 (require '[modern-cljs.shopping :as shop] :reload
                    '[domina.core :as dom] :reload
                    '[domina.events :as evt] :reload)
(require '[modern-cljs.shopping :as shop] :reload
                    '[domina.core :as dom] :reload
                    '[domina.events :as evt] :reload)
(evt/listen! (dom/by-id "calc") :click shop/calculate)
(evt/unlisten! (dom/by-id "calc") :click)
(evt/get-listeners (dom/by-id "calc") :click)
:cljs/stop
(start-repl)
(require '[modern-cljs.shopping :as shop] :reload
'[domina.core :as dom] :reload
'[domina.events :as evt] :reload)
(append! (xpath "//body") "<div>Hello world!</div>")
(doc dom/append!)
(dom/append! (dom/by-id "shoppingForm") "<div class = 'help'>Click </div>")
(evt/listen! (dom/by-id "calc") :mouseover (fn [] (dom/append! (dom/by-id "shoppingForm") "<div class = 'help'>Click to calculate</div>")))
(dom/by-class "help"))
(dom/by-class "help")
(dom/destroy! (dom/by-class "help"))
(dom/by-class "help")
(evt/listen! (dom/by-id "calc") :mouseout (fn [] (dom/destroy! (dom/by-class "help"))))
(start-repl)
(require '[hiccups.runtime])
(require-macros '[hiccups.core :refer [html]])
html [:span {:class "foo"> "bar])
(html [:span {:class "foo"} "bar])
(html [:span {:class "foo"} "bar"])
(html [:script])
(html [:div.help "Click"])
(start-repl)
(require '[modern-cljs.remotes :as r])
(r/calculate 10 12.25 8.25 5)
(start-repl)
(* "6" "7")
(+ "6" "7")
(* "2" (+ "1" "2"))
:cljs/quit
(+ "1" "2")
(start-repl)
(require '[domina.events :as evt])
(start-repl
)
(start-repl)
(in-ns 'domina.events)
(map keyword(gobj/getValues events/EventType))
(map keyword (gobj/getValues events/EventType))
(start-repl)
(in-ns 'domina.events)
(map keyword (gobj/getValues events/EventType))
:cljs/quit
